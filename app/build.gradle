apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "de.mannodermaus.android-junit5"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ie.koala.fantascope"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            buildConfigField 'String', "ApiKeyV3", Fantascope_V3ApiKey
            resValue 'string', "api_key_v3", Fantascope_V3ApiKey
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField 'String', "ApiKeyV3", Fantascope_V3ApiKey
            resValue 'string', "api_key_v3", Fantascope_V3ApiKey
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    // architecture components
    implementation 'android.arch.paging:runtime:1.0.1'
    implementation('android.arch.work:work-runtime:1.0.0-alpha09') {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.0.0'


    // Room components
    implementation 'androidx.room:room-runtime:2.1.0-alpha02'
    kapt 'androidx.room:room-compiler:2.1.0-alpha02'

    // Material Design
    implementation 'com.google.android.material:material:1.0.0'

    // Anko
    implementation 'org.jetbrains.anko:anko:0.10.5'
    implementation 'org.jetbrains.anko:anko-commons:0.10.5'
    implementation 'org.jetbrains.anko:anko-design:0.10.5'

    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    // moshi
    implementation "com.squareup.retrofit2:converter-moshi:2.4.0"
    implementation "com.squareup.moshi:moshi:1.7.0"
    implementation "com.squareup.moshi:moshi-kotlin:1.7.0"
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.7.0'

    // glide
    implementation ("com.github.bumptech.glide:glide:4.8.0") {
        exclude group: "com.android.support"
    }

    // logging
    api 'org.slf4j:slf4j-api:1.7.25'
    api 'org.slf4j:jul-to-slf4j:1.7.25'
    api 'com.github.tony19:logback-android:1.1.1-12'

    // testing
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    testImplementation 'org.mockito:mockito-core:2.23.0'

    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.3.1"

    // (Optional) If you also have JUnit 4-based tests
    testImplementation "junit:junit:4.12"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.1"

}
